{"version":4,"terraform_version":"1.9.1","serial":5,"lineage":"0de94927-d402-9796-480f-2743c5677fd4","outputs":{"app_repository_url":{"value":"https://github.com/Tirtxika/kbot","type":"string"},"cluster_name":{"value":"local-cluster","type":"string"},"flux_repository_url":{"value":"https://github.com/Tirtxika/local-cluster-flux-bootstrap","type":"string"},"setup_instructions":{"value":"# Setup Instructions for local-cluster\n    \n1. Create Kind cluster:\n   kind create cluster --name local-cluster --config kind-config.yaml\n    \n2. Install Flux CLI:\n   curl -s https://fluxcd.io/install.sh | sudo bash\n    \n3. Bootstrap Flux:\n   flux bootstrap github --owner=Tirtxika --repository=local-cluster-flux-bootstrap --branch=main --path=./clusters/local-cluster --personal\n    \n4. Apply application manifests:\n   kubectl apply -f flux-app-manifests.yaml\n    \n5. Verify Flux installation:\n   flux check\n    \n6. Monitor GitOps reconciliation:\n   flux get sources git\n   flux get helmreleases\n    \n# Access your application:\nkubectl port-forward svc/kbot 8080:80\n    \n# Or run the automated installation script:\n./install-scripts.sh\n","type":"string"},"tls_private_key":{"value":"-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIMvx0PT3kTSywJOYMbxK7q4NsZMIvhk6gyYpG1Pw0UCToAoGCCqGSM49\nAwEHoUQDQgAEpvAPLZCiSXlii6QUCnzjpU7HW12zxT9w5HE0N3vKzZtytuSDItKS\ne7Z1OEZhUHIPMU4fz70nMmcLwInpaIOx9Q==\n-----END EC PRIVATE KEY-----\n","type":"string","sensitive":true},"tls_public_key":{"value":"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKbwDy2Qokl5YoukFAp846VOx1tds8U/cORxNDd7ys2bcrbkgyLSknu2dThGYVByDzFOH8+9JzJnC8CJ6WiDsfU=\n","type":"string","sensitive":true}},"resources":[{"mode":"managed","type":"local_file","name":"app_helm_values","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"# Application Helm Chart Values\nreplicaCount: 2\n\nimage:\n  repository: ghcr.io/kbot\n  tag: latest\n  pullPolicy: IfNotPresent\n\nimagePullSecrets: []\nnameOverride: \"\"\nfullnameOverride: \"\"\n\nserviceAccount:\n  create: true\n  annotations: {}\n  name: \"\"\n\npodAnnotations: {}\n\npodSecurityContext: {}\n\nsecurityContext: {}\n\nservice:\n  type: ClusterIP\n  port: 80\n  targetPort: 8080\n\ningress:\n  enabled: true\n  className: \"envoy\"\n  annotations:\n    envoyproxy.io/rewrite-host: \"true\"\n  hosts:\n    - host: kbot.local\n      paths:\n        - path: /\n          pathType: Prefix\n  tls: []\n\nresources:\n  limits:\n    cpu: 500m\n    memory: 512Mi\n  requests:\n    cpu: 250m\n    memory: 256Mi\n\nautoscaling:\n  enabled: true\n  minReplicas: 2\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 80\n  targetMemoryUtilizationPercentage: 80\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n\n# Application specific configuration\napp:\n  name: kbot\n  version: latest\n  environment: \"development\"\n  \n# Monitoring configuration\nmonitoring:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n    interval: \"30s\"\n  \n# Logging configuration\nlogging:\n  level: \"info\"\n  format: \"json\" ","content_base64":null,"content_base64sha256":"9/PzKBkoSQEYtJZdgyHl2FmaoaNRPgAsH+vYb1h/dNU=","content_base64sha512":"2YPSFZSCX1CPN66WiGW5wr6Lk/h7sGT9aV+fGvwBh3LGtpcqA/CFJVHPuu03EM00gTz4vwCCBQEXVNKebQZ1Uw==","content_md5":"f3bdf8053444e74791281ace1ff95cd5","content_sha1":"52f37f954a20d82ce8cbe13a8cdcb232b418b506","content_sha256":"f7f3f3281928490118b4965d8321e5d8599aa1a3513e002c1febd86f587f74d5","content_sha512":"d983d21594825f508f37ae968865b9c2be8b93f87bb064fd695f9f1afc018772c6b6972a03f0852551cfbaed3710cd34813cf8bf008205011754d29e6d067553","directory_permission":"0777","file_permission":"0777","filename":"./app-values.yaml","id":"52f37f954a20d82ce8cbe13a8cdcb232b418b506","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"chart_deployment","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"kbot.fullname\" . }}\n  labels:\n    {{- include \"kbot.labels\" . | nindent 4 }}\nspec:\n  {{- if not .Values.autoscaling.enabled }}\n  replicas: {{ .Values.replicaCount }}\n  {{- end }}\n  selector:\n    matchLabels:\n      {{- include \"kbot.selectorLabels\" . | nindent 6 }}\n  template:\n    metadata:\n      {{- with .Values.podAnnotations }}\n      annotations:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      labels:\n        {{- include \"kbot.selectorLabels\" . | nindent 8 }}\n    spec:\n      {{- with .Values.imagePullSecrets }}\n      imagePullSecrets:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      serviceAccountName: {{ include \"kbot.serviceAccountName\" . }}\n      securityContext:\n        {{- toYaml .Values.podSecurityContext | nindent 8 }}\n      containers:\n        - name: {{ .Chart.Name }}\n          securityContext:\n            {{- toYaml .Values.securityContext | nindent 12 }}\n          image: \"{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}\"\n          imagePullPolicy: {{ .Values.image.pullPolicy }}\n          ports:\n            - name: http\n              containerPort: {{ .Values.service.targetPort }}\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 30\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /health\n              port: http\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          resources:\n            {{- toYaml .Values.resources | nindent 12 }}\n          {{- with .Values.env }}\n          env:\n            {{- toYaml . | nindent 12 }}\n          {{- end }}\n      {{- with .Values.nodeSelector }}\n      nodeSelector:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      {{- with .Values.affinity }}\n      affinity:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      {{- with .Values.tolerations }}\n      tolerations:\n        {{- toYaml . | nindent 8 }}\n      {{- end }} ","content_base64":null,"content_base64sha256":"d6/sbpuejm2jzXhpY4hTBVcrWwkoHRkybTPahOHz0Jw=","content_base64sha512":"wGKGRcvg+c4E7Ryxm9Vg8Br4ohziC3cCNPTVQ/LneyFztDZFpIPEfFUJuVXEG0Ar4boPhPLtfdPrcCuJERz+hA==","content_md5":"44d94ebba69c69b6210e97be7ad22ffa","content_sha1":"01c08e2741e882f0c1b721d1c4505a6c775364a4","content_sha256":"77afec6e9b9e8e6da3cd786963885305572b5b09281d19326d33da84e1f3d09c","content_sha512":"c0628645cbe0f9ce04ed1cb19bd560f01af8a21ce20b770234f4d543f2e77b2173b43645a483c47c5509b955c41b402be1ba0f84f2ed7dd3eb702b89111cfe84","directory_permission":"0777","file_permission":"0777","filename":"./charts/templates/deployment.yaml","id":"01c08e2741e882f0c1b721d1c4505a6c775364a4","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"chart_helpers","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"kbot.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" }}\n{{- end }}\n\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"kbot.fullname\" -}}\n{{- if .Values.fullnameOverride }}\n{{- .Values.fullnameOverride | trunc 63 | trimSuffix \"-\" }}\n{{- else }}\n{{- $name := default .Chart.Name .Values.nameOverride }}\n{{- if contains $name .Release.Name }}\n{{- .Release.Name | trunc 63 | trimSuffix \"-\" }}\n{{- else }}\n{{- printf \"%s-%s\" .Release.Name $name | trunc 63 | trimSuffix \"-\" }}\n{{- end }}\n{{- end }}\n{{- end }}\n\n{{/*\nCreate chart name and version as used by the chart label.\n*/}}\n{{- define \"kbot.chart\" -}}\n{{- printf \"%s-%s\" .Chart.Name .Chart.Version | replace \"+\" \"_\" | trunc 63 | trimSuffix \"-\" }}\n{{- end }}\n\n{{/*\nCommon labels\n*/}}\n{{- define \"kbot.labels\" -}}\nhelm.sh/chart: {{ include \"kbot.chart\" . }}\n{{ include \"kbot.selectorLabels\" . }}\n{{- if .Chart.AppVersion }}\napp.kubernetes.io/version: {{ .Chart.AppVersion | quote }}\n{{- end }}\napp.kubernetes.io/managed-by: {{ .Release.Service }}\n{{- end }}\n\n{{/*\nSelector labels\n*/}}\n{{- define \"kbot.selectorLabels\" -}}\napp.kubernetes.io/name: {{ include \"kbot.name\" . }}\napp.kubernetes.io/instance: {{ .Release.Name }}\n{{- end }}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"kbot.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create }}\n{{- default (include \"kbot.fullname\" .) .Values.serviceAccount.name }}\n{{- else }}\n{{- default \"default\" .Values.serviceAccount.name }}\n{{- end }}\n{{- end }} ","content_base64":null,"content_base64sha256":"floIcIbcgsE083vsuOjHMhf+GdzgLwT7P0yENBmV0cs=","content_base64sha512":"kK+3LLrr4gHBxdSqOQ2JYbYePAAeI0GOXpHx9KCZYNiHGMl4kC9JM/ytASFXYGLT4Ux8NgFQmg7wpzkRz9cJaQ==","content_md5":"971c0c6ff340b829dacec5fd0900f030","content_sha1":"074958c646df55c52dbadfe4769794a4e1c70dd4","content_sha256":"7e5a087086dc82c134f37becb8e8c73217fe19dce02f04fb3f4c84341995d1cb","content_sha512":"90afb72cbaebe201c1c5d4aa390d8961b61e3c001e23418e5e91f1f4a09960d88718c978902f4933fcad0121576062d3e14c7c3601509a0ef0a73911cfd70969","directory_permission":"0777","file_permission":"0777","filename":"./charts/templates/_helpers.tpl","id":"074958c646df55c52dbadfe4769794a4e1c70dd4","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"chart_hpa","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"{{- if .Values.autoscaling.enabled }}\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: {{ include \"kbot.fullname\" . }}\n  labels:\n    {{- include \"kbot.labels\" . | nindent 4 }}\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: {{ include \"kbot.fullname\" . }}\n  minReplicas: {{ .Values.autoscaling.minReplicas }}\n  maxReplicas: {{ .Values.autoscaling.maxReplicas }}\n  metrics:\n    {{- if .Values.autoscaling.targetCPUUtilizationPercentage }}\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}\n    {{- end }}\n    {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}\n    - type: Resource\n      resource:\n        name: memory\n        target:\n          type: Utilization\n          averageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}\n    {{- end }}\n{{- end }} ","content_base64":null,"content_base64sha256":"kkhpS86HQrij1rImRJZ8yIiyxyPWC8Xnskq74BW/p/I=","content_base64sha512":"HPQT7E9uEzHxWFxXWaw5J11KlzXX7QYXXMURBtuIjx31QimGvaQQjuQvp/YRqCdMx3YD1NFqkolVhD/Vg9qyRw==","content_md5":"890f3c6ee4122e5e53f57e56c5f15ac3","content_sha1":"ff25093452a2f074e3345a296729f30f3749e37a","content_sha256":"9248694bce8742b8a3d6b22644967cc888b2c723d60bc5e7b24abbe015bfa7f2","content_sha512":"1cf413ec4f6e1331f1585c5759ac39275d4a9735d7ed06175cc51106db888f1df5422986bda4108ee42fa7f611a8274cc77603d4d16a928955843fd583dab247","directory_permission":"0777","file_permission":"0777","filename":"./charts/templates/hpa.yaml","id":"ff25093452a2f074e3345a296729f30f3749e37a","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"chart_ingress","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"{{- if .Values.ingress.enabled -}}\n{{- $fullName := include \"kbot.fullname\" . -}}\n{{- $svcPort := .Values.service.port -}}\n{{- if and .Values.ingress.className (not (hasKey .Values.ingress.annotations \"kubernetes.io/ingress.class\")) }}\n  {{- $_ := set .Values.ingress.annotations \"kubernetes.io/ingress.class\" .Values.ingress.className}}\n{{- end }}\n{{- if semverCompare \"\u003e=1.19-0\" .Capabilities.KubeVersion.GitVersion -}}\napiVersion: networking.k8s.io/v1\n{{- else if semverCompare \"\u003e=1.14-0\" .Capabilities.KubeVersion.GitVersion -}}\napiVersion: networking.k8s.io/v1beta1\n{{- else -}}\napiVersion: extensions/v1beta1\n{{- end }}\nkind: Ingress\nmetadata:\n  name: {{ $fullName }}\n  labels:\n    {{- include \"kbot.labels\" . | nindent 4 }}\n  {{- with .Values.ingress.annotations }}\n  annotations:\n    {{- toYaml . | nindent 4 }}\n  {{- end }}\nspec:\n  {{- if and .Values.ingress.className (semverCompare \"\u003e=1.18-0\" .Capabilities.KubeVersion.GitVersion) }}\n  ingressClassName: {{ .Values.ingress.className }}\n  {{- end }}\n  {{- if .Values.ingress.tls }}\n  tls:\n    {{- range .Values.ingress.tls }}\n    - hosts:\n        {{- range .hosts }}\n        - {{ . | quote }}\n        {{- end }}\n      secretName: {{ .secretName }}\n    {{- end }}\n  {{- end }}\n  rules:\n    {{- range .Values.ingress.hosts }}\n    - host: {{ .host | quote }}\n      http:\n        paths:\n          {{- range .paths }}\n          - path: {{ .path }}\n            {{- if and .pathType (semverCompare \"\u003e=1.18-0\" $.Capabilities.KubeVersion.GitVersion) }}\n            pathType: {{ .pathType }}\n            {{- end }}\n            backend:\n              {{- if semverCompare \"\u003e=1.19-0\" $.Capabilities.KubeVersion.GitVersion }}\n              service:\n                name: {{ $fullName }}\n                port:\n                  number: {{ $svcPort }}\n              {{- else }}\n              serviceName: {{ $fullName }}\n              servicePort: {{ $svcPort }}\n              {{- end }}\n          {{- end }}\n    {{- end }}\n{{- end }} ","content_base64":null,"content_base64sha256":"1O32V+5ymVi9YCMud6CCx3G9J+zffevog7WMmp8MgZI=","content_base64sha512":"Medxw8vAFeZdjtKbOcw610P+LaM8eZeORaRTZIdjTAg6VftMmWs3w36Z6tZF8f1WK3CpvEzOl+1bDMstDQGhQA==","content_md5":"f94b69cbac01ca087560fc54c2750767","content_sha1":"85cd05baf98bb81e621c5886f1c3236ae408fc14","content_sha256":"d4edf657ee729958bd60232e77a082c771bd27ecdf7debe883b58c9a9f0c8192","content_sha512":"31e771c3cbc015e65d8ed29b39cc3ad743fe2da33c79978e45a4536487634c083a55fb4c996b37c37e99ead645f1fd562b70a9bc4cce97ed5b0ccb2d0d01a140","directory_permission":"0777","file_permission":"0777","filename":"./charts/templates/ingress.yaml","id":"85cd05baf98bb81e621c5886f1c3236ae408fc14","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"chart_service","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"apiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"kbot.fullname\" . }}\n  labels:\n    {{- include \"kbot.labels\" . | nindent 4 }}\nspec:\n  type: {{ .Values.service.type }}\n  ports:\n    - port: {{ .Values.service.port }}\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    {{- include \"kbot.selectorLabels\" . | nindent 4 }} ","content_base64":null,"content_base64sha256":"glh3S2/qnId1ePgJjeHzERwLoUX6IJCNyu2yz1NYtDg=","content_base64sha512":"BNqYW3ZsTbUvNFQA6jq4HKbwNjONY8OMJ48aA9AwGvtJSdDmqoHpJ/577d4Ve5CH1ZA7OZIxePqDbKuORsB1mg==","content_md5":"b79d26abf4356b483328ce05bd42cbba","content_sha1":"7bdb90437a6c2c80cedda199f64fcf7dfb8c1471","content_sha256":"8258774b6fea9c877578f8098de1f3111c0ba145fa20908dcaedb2cf5358b438","content_sha512":"04da985b766c4db52f345400ea3ab81ca6f036338d63c38c278f1a03d0301afb4949d0e6aa81e927fe7bedde157b9087d5903b39923178fa836cab8e46c0759a","directory_permission":"0777","file_permission":"0777","filename":"./charts/templates/service.yaml","id":"7bdb90437a6c2c80cedda199f64fcf7dfb8c1471","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"chart_values","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"# Default values for kbot\nreplicaCount: 2\n\nimage:\n  repository: ghcr.io/kbot\n  tag: latest\n  pullPolicy: IfNotPresent\n\nimagePullSecrets: []\nnameOverride: \"\"\nfullnameOverride: \"\"\n\nserviceAccount:\n  create: true\n  annotations: {}\n  name: \"\"\n\npodAnnotations: {}\n\npodSecurityContext: {}\n\nsecurityContext: {}\n\nservice:\n  type: ClusterIP\n  port: 80\n  targetPort: 8080\n\ningress:\n  enabled: true\n  className: \"envoy\"\n  annotations:\n    envoyproxy.io/rewrite-host: \"true\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\n  hosts:\n    - host: kbot.local\n      paths:\n        - path: /\n          pathType: Prefix\n  tls: []\n\nresources:\n  limits:\n    cpu: 500m\n    memory: 512Mi\n  requests:\n    cpu: 250m\n    memory: 256Mi\n\nautoscaling:\n  enabled: true\n  minReplicas: 2\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 80\n  targetMemoryUtilizationPercentage: 80\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n\n# Application specific configuration\napp:\n  name: kbot\n  version: latest\n  environment: \"development\"\n  \n# Monitoring configuration\nmonitoring:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n    interval: \"30s\"\n  \n# Logging configuration\nlogging:\n  level: \"info\"\n  format: \"json\"\n\n# Environment variables\nenv:\n  - name: LOG_LEVEL\n    value: \"info\"\n  - name: PORT\n    value: \"8080\" ","content_base64":null,"content_base64sha256":"ReP/PqZEruom7xr7905EkXSKHinEMFUSkQ0XdqAMbxk=","content_base64sha512":"za6sfq3hsFxEkLK2MPXdRk4L9yYU3BfRNzNi7US8MLFrGdyCnJoI1bAyUBQPJYc2lncTQ9cYLAZny3pRvSFMAQ==","content_md5":"6fc93d439f5b330c993c2a8c6ec67a54","content_sha1":"d356d7acce44900702ec3418e998dfc9dd3366fa","content_sha256":"45e3ff3ea644aeea26ef1afbf74e4491748a1e29c4305512910d1776a00c6f19","content_sha512":"cdaeac7eade1b05c4490b2b630f5dd464e0bf72614dc17d1373362ed44bc30b16b19dc829c9a08d5b03250140f25873696771343d7182c0667cb7a51bd214c01","directory_permission":"0777","file_permission":"0777","filename":"./charts/values.yaml","id":"d356d7acce44900702ec3418e998dfc9dd3366fa","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"chart_yaml","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"apiVersion: v2\nname: kbot\ndescription: A Helm chart for kbot application\ntype: application\nversion: 0.1.0\nappVersion: \"latest\"\nkeywords:\n  - kbot\n  - web\n  - api\nhome: https://github.com/Tirtxika/kbot\nsources:\n  - https://github.com/Tirtxika/kbot\nmaintainers:\n  - name: Tirtxika\n    email: Tirtxika@example.com ","content_base64":null,"content_base64sha256":"/vQi1xW77VoQhTESDbK9zPFcvKA2945R0qdhjHBFqbo=","content_base64sha512":"Y0vi+pt/ocZlYkQ0blCZtuSbgdiOAAyHxULQM4TTIgePbIH+YpOKLTst7f6VqC/fbkYhsPH0imcwiRA5Xy/6eA==","content_md5":"844c56bc12902d111870cb841424c030","content_sha1":"71065e79ec330e8f19a7c00450193b732acf90c2","content_sha256":"fef422d715bbed5a108531120db2bdccf15cbca036f78e51d2a7618c7045a9ba","content_sha512":"634be2fa9b7fa1c6656244346e5099b6e49b81d88e000c87c542d03384d322078f6c81fe62938a2d3b2dedfe95a82fdf6e4621b0f1f48a67308910395f2ffa78","directory_permission":"0777","file_permission":"0777","filename":"./charts/Chart.yaml","id":"71065e79ec330e8f19a7c00450193b732acf90c2","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"cleanup_script","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"#!/bin/bash\n\nset -euo pipefail\n\n# Colors for output\n# (No variable assignments needed, use codes directly)\n\n# Configuration\nCLUSTER_NAME=\"local-cluster\"\nGITHUB_OWNER=\"Tirtxika\"\nFLUX_REPO=\"local-cluster-flux-bootstrap\"\nAPP_REPO=\"kbot\"\n\necho -e \"\\033[0;34m🧹 Starting cleanup of local Kubernetes cluster and resources\\033[0m\"\n\n# Function to confirm cleanup\nconfirm_cleanup() {\n    echo -e \"\\033[1;33m⚠️  This will remove:\\033[0m\"\n    echo \"  - Kind cluster: $CLUSTER_NAME\"\n    echo \"  - Flux system\"\n    echo \"  - All Kubernetes resources\"\n    echo \"  - Generated files\"\n    echo \"\"\n    read -p \"Are you sure you want to continue? (y/N): \" -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        echo -e \"\\033[1;33mCleanup cancelled.\\033[0m\"\n        exit 0\n    fi\n}\n\n# Function to cleanup Flux\ncleanup_flux() {\n    echo -e \"\\033[1;33m🔄 Cleaning up Flux...\\033[0m\"\n    \n    if command -v flux \u003e/dev/null 2\u003e\u00261; then\n        # Uninstall Flux\n        flux uninstall --silent || true\n        \n        # Remove Flux namespace\n        kubectl delete namespace flux-system --ignore-not-found=true || true\n    else\n        echo \"Flux CLI not found, skipping Flux cleanup\"\n    fi\n    \n    echo -e \"\\033[0;32m✅ Flux cleanup completed\\033[0m\"\n}\n\n# Function to cleanup Kind cluster\ncleanup_kind_cluster() {\n    echo -e \"\\033[1;33m🏗️  Cleaning up Kind cluster...\\033[0m\"\n    \n    if command -v kind \u003e/dev/null 2\u003e\u00261; then\n        # Delete Kind cluster\n        kind delete cluster --name $CLUSTER_NAME || true\n    else\n        echo \"Kind CLI not found, skipping cluster cleanup\"\n    fi\n    \n    echo -e \"\\033[0;32m✅ Kind cluster cleanup completed\\033[0m\"\n}\n\n# Function to cleanup Docker resources\ncleanup_docker() {\n    echo -e \"\\033[1;33m🐳 Cleaning up Docker resources...\\033[0m\"\n    \n    # Remove unused containers, networks, and images\n    docker system prune -f || true\n    \n    # Remove dangling images\n    docker image prune -f || true\n    \n    echo -e \"\\033[0;32m✅ Docker cleanup completed\\033[0m\"\n}\n\n# Function to cleanup generated files\ncleanup_files() {\n    echo -e \"\\033[1;33m📁 Cleaning up generated files...\\033[0m\"\n    \n    # List of files to remove\n    files_to_remove=(\n        \"kind-config.yaml\"\n        \"flux-bootstrap.yaml\"\n        \"flux-app-manifests.yaml\"\n        \"app-values.yaml\"\n        \"install-scripts.sh\"\n        \"Dockerfile\"\n        \"go.mod\"\n        \"main.go\"\n        \".github/workflows/ci-cd.yaml\"\n        \"charts/\"\n    )\n    \n    for file in \"${files_to_remove[@]}\"; do\n        if [ -e \"$file\" ]; then\n            rm -rf \"$file\"\n            echo \"Removed: $file\"\n        fi\n    done\n    \n    echo -e \"\\033[0;32m✅ File cleanup completed\\033[0m\"\n}\n\n# Function to cleanup GitHub repositories (optional)\ncleanup_github_repos() {\n    echo -e \"\\033[1;33m🐙 Cleaning up GitHub repositories...\\033[0m\"\n    \n    echo \"This will remove the following repositories:\"\n    echo \"  - $FLUX_REPO\"\n    echo \"  - $APP_REPO\"\n    echo \"\"\n    read -p \"Do you want to delete these repositories? (y/N): \" -n 1 -r\n    echo\n    \n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n        # Note: This requires GitHub CLI or API access\n        echo \"To delete repositories, use:\"\n        echo \"  gh repo delete $GITHUB_OWNER/$FLUX_REPO --yes\"\n        echo \"  gh repo delete $GITHUB_OWNER/$APP_REPO --yes\"\n        echo \"\"\n        echo \"Or delete them manually from GitHub web interface\"\n    else\n        echo \"Skipping GitHub repository cleanup\"\n    fi\n    \n    echo -e \"\\033[0;32m✅ GitHub cleanup completed\\033[0m\"\n}\n\n# Function to cleanup Terraform state\ncleanup_terraform() {\n    echo -e \"\\033[1;33m🏗️  Cleaning up OpenTofu state...\\033[0m\"\n    \n    if [ -d \".terraform\" ]; then\n        # Destroy OpenTofu resources\n        tofu destroy -var-file=vars.tfvars -auto-approve || true\n        \n        # Remove OpenTofu files\n        rm -rf .terraform .terraform.lock.hcl tofu.tfstate* || true\n    fi\n    \n    echo -e \"\\033[0;32m✅ OpenTofu cleanup completed\\033[0m\"\n}\n\n# Function to verify cleanup\nverify_cleanup() {\n    echo -e \"\\033[1;33m🔍 Verifying cleanup...\\033[0m\"\n    \n    # Check if Kind cluster exists\n    if command -v kind \u003e/dev/null 2\u003e\u00261; then\n        if kind get clusters | grep -q \"$CLUSTER_NAME\"; then\n            echo -e \"\\033[0;31m❌ Kind cluster still exists\\033[0m\"\n        else\n            echo -e \"\\033[0;32m✅ Kind cluster removed\\033[0m\"\n        fi\n    fi\n    \n    # Check if kubectl context exists\n    if command -v kubectl \u003e/dev/null 2\u003e\u00261; then\n        if kubectl config get-contexts | grep -q \"kind-$CLUSTER_NAME\"; then\n            echo -e \"\\033[0;31m❌ kubectl context still exists\\033[0m\"\n        else\n            echo -e \"\\033[0;32m✅ kubectl context removed\\033[0m\"\n        fi\n    fi\n    \n    # Check if Docker containers exist\n    if docker ps -a --format \"table {{.Names}}\" | grep -q \"$CLUSTER_NAME\"; then\n        echo -e \"\\033[0;31m❌ Docker containers still exist\\033[0m\"\n    else\n        echo -e \"\\033[0;32m✅ Docker containers removed\\033[0m\"\n    fi\n    \n    echo -e \"\\033[0;32m✅ Cleanup verification completed\\033[0m\"\n}\n\n# Main cleanup function\nmain() {\n    confirm_cleanup\n    cleanup_flux\n    cleanup_kind_cluster\n    cleanup_docker\n    cleanup_files\n    cleanup_github_repos\n    cleanup_terraform\n    verify_cleanup\n    \n    echo -e \"\\033[0;34m🎉 Cleanup completed successfully!\\033[0m\"\n    echo \"\"\n    echo -e \"\\033[1;33m📋 Summary:\\033[0m\"\n    echo \"  - Kind cluster: Removed\"\n    echo \"  - Flux system: Removed\"\n    echo \"  - Docker resources: Cleaned\"\n    echo \"  - Generated files: Removed\"\n    echo \"  - Terraform state: Cleaned\"\n    echo \"\"\n    echo -e \"\\033[0;32m🚀 You can now start fresh with a new setup!\\033[0m\"\n}\n\n# Run main function\nmain \"$@\" ","content_base64":null,"content_base64sha256":"CuM2HKMXEn4ky35v93xP4Jw4/zC1FnEDroCqaXVqM3k=","content_base64sha512":"sjc9s1feAA4LwsscT08dKAyJ/Tb8AOMrC/7nUYgdeUJVfhionCENSt6Wp4/3oXJRsXFAcTEzhmnEg83xw2Ra5g==","content_md5":"0f5642a55d8685f2490e742ab5aee366","content_sha1":"98807ad1809d494bf1f06a19b397ea6fda7572a4","content_sha256":"0ae3361ca317127e24cb7e6ff77c4fe09c38ff30b5167103ae80aa69756a3379","content_sha512":"b2373db357de000e0bc2cb1c4f4f1d280c89fd36fc00e32b0bfee751881d7942557e18a89c210d4ade96a78ff7a17251b171407131338669c483cdf1c3645ae6","directory_permission":"0777","file_permission":"0755","filename":"./cleanup.sh","id":"98807ad1809d494bf1f06a19b397ea6fda7572a4","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"dockerfile","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"# Build stage\nFROM golang:1.21-alpine AS builder\n\n# Install git and ca-certificates (needed for go mod download)\nRUN apk add --no-cache git ca-certificates tzdata\n\n# Set working directory\nWORKDIR /app\n\n# Copy go mod files\nCOPY go.mod go.sum ./\n\n# Download dependencies\nRUN go mod download\n\n# Copy source code\nCOPY . .\n\n# Build the application\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o kbot .\n\n# Final stage\nFROM scratch\n\n# Import from builder\nCOPY --from=builder /app/kbot /app/kbot\nCOPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n\n# Expose port\nEXPOSE 8080\n\n# Run the application\nENTRYPOINT [\"/app/kbot\"] ","content_base64":null,"content_base64sha256":"VVtXaZZix603vU1Qihksu689ArONR+ZeqqF7EajXYSU=","content_base64sha512":"4pdYE8d9xupttXA0Gg/JAmTCstzWnZwQJZ929izujPhYtsTaKBn3J/So0CpgvIkYMMbB6lN4jj+3XJzUu5P4UA==","content_md5":"a635ea39ed0421034320612b3d49ec15","content_sha1":"fc42cd984f22b26b87e30f332004ef3165220424","content_sha256":"555b57699662c7ad37bd4d508a192cbbaf3d02b38d47e65eaaa17b11a8d76125","content_sha512":"e2975813c77dc6ea6db570341a0fc90264c2b2dcd69d9c10259f76f62cee8cf858b6c4da2819f727f4a8d02a60bc891830c6c1ea53788e3fb75c9cd4bb93f850","directory_permission":"0777","file_permission":"0777","filename":"./Dockerfile","id":"fc42cd984f22b26b87e30f332004ef3165220424","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"flux_app_manifests","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"---\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: kbot\n  namespace: flux-system\nspec:\n  interval: 1m0s\n  ref:\n    branch: main\n  url: https://github.com/Tirtxika/kbot\n  secretRef:\n    name: flux-system\n---\napiVersion: helm.toolkit.fluxcd.io/v2\nkind: HelmRelease\nmetadata:\n  name: kbot\n  namespace: default\nspec:\n  interval: 5m0s\n  chart:\n    spec:\n      chart: kbot\n      version: 0.1.0\n      sourceRef:\n        kind: GitRepository\n        name: kbot\n        namespace: flux-system\n      interval: 1m0s\n  values:\n    replicaCount: 2\n    image:\n      repository: ghcr.io/kbot\n      tag: latest\n    ingress:\n      enabled: true\n      className: \"envoy\"\n      hosts:\n        - host: kbot.local\n          paths:\n            - path: /\n              pathType: Prefix\n    resources:\n      limits:\n        cpu: 500m\n        memory: 512Mi\n      requests:\n        cpu: 250m\n        memory: 256Mi\n    autoscaling:\n      enabled: true\n      minReplicas: 2\n      maxReplicas: 10 ","content_base64":null,"content_base64sha256":"g3BcrUbYjlBpaAbv7SkG3KabMRJRdIbZF5KatDyLDlQ=","content_base64sha512":"c7dFnn+OUM2CdUjclX+Em3jwJnfQ7KXDO8U7TTv57OlTAS3P8o05Xbrt+X4j/sWF0pQyqa45UmKysIUwfKRdsQ==","content_md5":"540652c8fc51022c1d8422383e687096","content_sha1":"95a9dcc60db8927eff69117c7ceb6ee8fffb1d51","content_sha256":"83705cad46d88e50696806efed2906dca69b3112517486d917929ab43c8b0e54","content_sha512":"73b7459e7f8e50cd827548dc957f849b78f02677d0eca5c33bc53b4d3bf9ece953012dcff28d395dbaedf97e23fec585d29432a9ae395262b2b085307ca45db1","directory_permission":"0777","file_permission":"0777","filename":"./flux-app-manifests.yaml","id":"95a9dcc60db8927eff69117c7ceb6ee8fffb1d51","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"flux_bootstrap_config","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: flux-system\n---\napiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: flux-system\n  namespace: flux-system\nspec:\n  interval: 1m0s\n  ref:\n    branch: main\n  url: https://github.com/Tirtxika/local-cluster-flux-bootstrap\n  secretRef:\n    name: flux-system\n---\napiVersion: kustomize.toolkit.fluxcd.io/v1\nkind: Kustomization\nmetadata:\n  name: flux-system\n  namespace: flux-system\nspec:\n  interval: 10m0s\n  path: ./clusters/local-cluster\n  prune: true\n  sourceRef:\n    kind: GitRepository\n    name: flux-system\n  targetNamespace: flux-system\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: flux-system\n  namespace: flux-system\ntype: Opaque\ndata:\n  username: VGlydHhpa2E=\n  password: Z2hwX1l2TmQybGtLT09YOFBsTnNPR21udVFSUVkzQ0MxaDJYZFhqbA==\n---\n# TLS Secret for Flux\napiVersion: v1\nkind: Secret\nmetadata:\n  name: flux-tls-keys\n  namespace: flux-system\ntype: Opaque\ndata:\n  identity.pem: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU12eDBQVDNrVFN5d0pPWU1ieEs3cTROc1pNSXZoazZneVlwRzFQdzBVQ1RvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFcHZBUExaQ2lTWGxpaTZRVUNuempwVTdIVzEyenhUOXc1SEUwTjN2S3padHl0dVNESXRLUwplN1oxT0VaaFVISVBNVTRmejcwbk1tY0x3SW5wYUlPeDlRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=\n  identity.pub: ZWNkc2Etc2hhMi1uaXN0cDI1NiBBQUFBRTJWalpITmhMWE5vWVRJdGJtbHpkSEF5TlRZQUFBQUlibWx6ZEhBeU5UWUFBQUJCQktid0R5MlFva2w1WW91a0ZBcDg0NlZPeDF0ZHM4VS9jT1J4TkRkN3lzMmJjcmJrZ3lMU2tudTJkVGhHWVZCeUR6Rk9IOCs5SnpKbkM4Q0o2V2lEc2ZVPQo= ","content_base64":null,"content_base64sha256":"v7uEuyykVPNkay+JJki2OeZVCJWv7ZqJmeCxK+cGY2E=","content_base64sha512":"Ktv4gBnP20L+Tus3r0+LxCdmS80uyAcwybJKcUP/P+s17/2zl6cUe3joargI86jfDAenXVxeH//WhWbBp/K0nA==","content_md5":"2119a312794bc3ca1caca951d12272a1","content_sha1":"2b96f4e8e3fbcc8d366afc26dfc8b1b99431fd50","content_sha256":"bfbb84bb2ca454f3646b2f892648b639e6550895afed9a8999e0b12be7066361","content_sha512":"2adbf88019cfdb42fe4eeb37af4f8bc427664bcd2ec80730c9b24a7143ff3feb35effdb397a7147b78e86ab808f3a8df0c07a75d5c5e1fffd68566c1a7f2b49c","directory_permission":"0777","file_permission":"0777","filename":"./flux-bootstrap.yaml","id":"2b96f4e8e3fbcc8d366afc26dfc8b1b99431fd50","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"content"}],[{"type":"get_attr","value":"sensitive_content"}]],"dependencies":["module.tls_keys.tls_private_key.this"]}]},{"mode":"managed","type":"local_file","name":"github_actions_workflow","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version to release'\n        required: false\n        default: ''\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${app_name}\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Go\n      uses: actions/setup-go@v4\n      with:\n        go-version: '1.21'\n\n    - name: Run tests\n      run: |\n        go test -v ./...\n        go vet ./...\n        go fmt ./...\n\n    - name: Run security scan\n      uses: aquasecurity/trivy-action@master\n      with:\n        scan-type: 'fs'\n        scan-ref: '.'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n\n  build:\n    name: Build and Push\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n    outputs:\n      image_tag: ${{ steps.meta.outputs.tags }}\n      version: ${{ steps.version.outputs.version }}\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      with:\n        fetch-depth: 0\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v3\n\n    - name: Log in to Container Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ secrets.REGISTRY_USERNAME }}\n        password: ${{ secrets.REGISTRY_PASSWORD }}\n\n    - name: Extract metadata\n      id: meta\n      uses: docker/metadata-action@v5\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=semver,pattern=${{version}}\n          type=semver,pattern=${{major}}.${{minor}}\n          type=sha,prefix=${{branch}}-\n\n    - name: Generate version\n      id: version\n      run: |\n        if [ \"${{ github.event.inputs.version }}\" != \"\" ]; then\n          echo \"version=${{ github.event.inputs.version }}\" \u003e\u003e $GITHUB_OUTPUT\n        else\n          echo \"version=$(date +'%Y.%m.%d-%H%M%S')\" \u003e\u003e $GITHUB_OUTPUT\n        fi\n\n    - name: Build and push Docker image\n      uses: docker/build-push-action@v5\n      with:\n        context: .\n        push: true\n        tags: |\n          ${{ steps.meta.outputs.tags }}\n          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\n        labels: ${{ steps.meta.outputs.labels }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n\n  update-helm-chart:\n    name: Update Helm Chart\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      with:\n        token: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Configure Git\n      run: |\n        git config --local user.email \"action@github.com\"\n        git config --local user.name \"GitHub Action\"\n\n    - name: Update Helm chart version\n      run: |\n        # Update Chart.yaml version\n        sed -i \"s/version: .*/version: ${{ needs.build.outputs.version }}/\" charts/${app_name}/Chart.yaml\n        sed -i \"s/appVersion: .*/appVersion: \\\"${{ needs.build.outputs.version }}\\\"/\" charts/${app_name}/Chart.yaml\n        \n        # Update values.yaml with new image tag\n        sed -i \"s|repository: .*|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|\" charts/${app_name}/values.yaml\n        sed -i \"s/tag: .*/tag: \\\"${{ needs.build.outputs.version }}\\\"/\" charts/${app_name}/values.yaml\n\n    - name: Commit and push changes\n      run: |\n        git add charts/${app_name}/Chart.yaml charts/${app_name}/values.yaml\n        git commit -m \"chore: bump version to ${{ needs.build.outputs.version }}\"\n        git push\n\n  deploy:\n    name: Deploy to Cluster\n    needs: [build, update-helm-chart]\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Install kubectl\n      uses: azure/setup-kubectl@v3\n      with:\n        version: 'latest'\n\n    - name: Configure kubectl for Kind cluster\n      run: |\n        echo \"Configuring kubectl for local Kind cluster\"\n\n    - name: Verify Flux installation\n      run: |\n        kubectl get pods -n flux-system\n        flux check\n\n    - name: Trigger Flux reconciliation\n      run: |\n        flux reconcile source git ${app_name}\n        flux reconcile helmrelease ${app_name}\n\n    - name: Wait for deployment\n      run: |\n        kubectl wait --for=condition=available --timeout=300s deployment/${app_name}\n\n  notify:\n    name: Notify\n    needs: [build, deploy]\n    runs-on: ubuntu-latest\n    if: always()\n    steps:\n    - name: Notify on success\n      if: needs.build.result == 'success' \u0026\u0026 needs.deploy.result == 'success'\n      run: |\n        echo \"✅ Deployment successful!\"\n        echo \"Version: ${{ needs.build.outputs.version }}\"\n        echo \"Image: ${{ needs.build.outputs.image_tag }}\"\n\n    - name: Notify on failure\n      if: needs.build.result == 'failure' || needs.deploy.result == 'failure'\n      run: |\n        echo \"❌ Deployment failed!\"\n        exit 1 ","content_base64":null,"content_base64sha256":"DozRkJrS0uKMvNbim4xKF/ub2phqsnsO6rbK+NtPS5Y=","content_base64sha512":"mWFaDgYnt8s2+RBFYMkF+5WA2R6xLI562IsQtolLihkaK09jTkd5Gy2jR0OpI+VJ5092lNJgmVmhLbiJvIftnQ==","content_md5":"7a171e5c6894afc1a0c84bedb4e78d54","content_sha1":"e525968fc8740571bcb401019cec86b64057bc0c","content_sha256":"0e8cd1909ad2d2e28cbcd6e29b8c4a17fb9bda986ab27b0eeab6caf8db4f4b96","content_sha512":"99615a0e0627b7cb36f9104560c905fb9580d91eb12c8e7ad88b10b6894b8a191a2b4f634e47791b2da34743a923e549e74f7694d2609959a12db889bc87ed9d","directory_permission":"0755","file_permission":"0777","filename":"./.github/workflows/ci-cd.yaml","id":"e525968fc8740571bcb401019cec86b64057bc0c","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}],[{"type":"get_attr","value":"content"}]]}]},{"mode":"managed","type":"local_file","name":"go_mod","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"module github.com/Tirtxika/kbot\n\ngo 1.21\n\nrequire (\n\tgithub.com/gin-gonic/gin v1.9.1\n\tgithub.com/sirupsen/logrus v1.9.3\n\tk8s.io/client-go v0.28.0\n)\n\nrequire (\n\tgithub.com/bytedance/sonic v1.9.1 // indirect\n\tgithub.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect\n\tgithub.com/gabriel-vasile/mimetype v1.4.2 // indirect\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\n\tgithub.com/go-playground/locales v0.14.1 // indirect\n\tgithub.com/go-playground/universal-translator v0.18.1 // indirect\n\tgithub.com/go-playground/validator/v10 v10.14.0 // indirect\n\tgithub.com/goccy/go-json v0.10.2 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.4 // indirect\n\tgithub.com/leodido/go-urn v1.2.4 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.0.8 // indirect\n\tgithub.com/twitchyliquid64/golang-asm v0.15.1 // indirect\n\tgithub.com/ugorji/go/codec v1.2.11 // indirect\n\tgolang.org/x/arch v0.3.0 // indirect\n\tgolang.org/x/crypto v0.9.0 // indirect\n\tgolang.org/x/net v0.10.0 // indirect\n\tgolang.org/x/sys v0.8.0 // indirect\n\tgolang.org/x/text v0.9.0 // indirect\n\tgoogle.golang.org/protobuf v1.30.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n) ","content_base64":null,"content_base64sha256":"OMyi2x0BSgwixA/TlIsYp9jpnL4FJCxqu5CEf9Xs3mE=","content_base64sha512":"l1lIQkUkC5cJCCZMCcq2p0ejlW6H84C4e/c82eMC+hpbtNvF2tZA1J2enwMUqEHlMMsXFWjKmVmqN2AKF/pRMw==","content_md5":"7126b3fa78944af151c7e7daa8d4623f","content_sha1":"e65bfa3938046b7bcc1d244d419841d47f3f1101","content_sha256":"38cca2db1d014a0c22c40fd3948b18a7d8e99cbe05242c6abb90847fd5ecde61","content_sha512":"9759484245240b970908264c09cab6a747a3956e87f380b87bf73cd9e302fa1a5bb4dbc5dad640d49d9e9f0314a841e530cb171568ca9959aa37600a17fa5133","directory_permission":"0777","file_permission":"0777","filename":"./go.mod","id":"e65bfa3938046b7bcc1d244d419841d47f3f1101","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"install_script","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"#!/bin/bash\n\nset -euo pipefail\n\n# Colors for output\n# (No variable assignments needed, use codes directly)\n\n# Configuration\nCLUSTER_NAME=\"local-cluster\"\nGITHUB_OWNER=\"Tirtxika\"\nFLUX_REPO=\"local-cluster-flux-bootstrap\"\nAPP_REPO=\"kbot\"\n\necho -e \"\\033[0;34m🚀 Starting local Kubernetes cluster setup with Flux and GitOps\\033[0m\"\n\n# Function to check if command exists\ncommand_exists() {\n    command -v \"$1\" \u003e/dev/null 2\u003e\u00261\n}\n\n# Function to install required tools\ninstall_tools() {\n    echo -e \"\\033[1;33m📦 Installing required tools...\\033[0m\"\n    \n    # Install Kind\n    if ! command_exists kind; then\n        echo \"Installing Kind...\"\n        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64\n        chmod +x ./kind\n        sudo mv ./kind /usr/local/bin/kind\n    fi\n    \n    # Install kubectl\n    if ! command_exists kubectl; then\n        echo \"Installing kubectl...\"\n        curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n        chmod +x kubectl\n        sudo mv kubectl /usr/local/bin/\n    fi\n    \n    # Install Helm\n    if ! command_exists helm; then\n        echo \"Installing Helm...\"\n        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n    fi\n    \n    # Install Flux CLI\n    if ! command_exists flux; then\n        echo \"Installing Flux CLI...\"\n        curl -s https://fluxcd.io/install.sh | sudo bash\n    fi\n    \n    # Install Docker (if not running)\n    if ! docker info \u003e/dev/null 2\u003e\u00261; then\n        echo -e \"\\033[0;31m❌ Docker is not running. Please start Docker and try again.\\033[0m\"\n        exit 1\n    fi\n}\n\n# Function to create Kind cluster\ncreate_cluster() {\n    echo -e \"\\033[1;33m🏗️  Creating Kind cluster...\\033[0m\"\n    \n    # Create cluster with configuration\n    kind create cluster --name $CLUSTER_NAME --config kind-config.yaml\n    \n    # Wait for cluster to be ready\n    kubectl wait --for=condition=Ready nodes --all --timeout=300s\n    \n    echo -e \"\\033[0;32m✅ Kind cluster created successfully\\033[0m\"\n}\n\n# Function to install Envoy Gateway\ninstall_envoy_gateway() {\n    echo -e \"\\033[1;33m🌐 Installing Envoy Gateway...\\033[0m\"\n    \n    # Install Envoy Gateway\n    helm repo add envoy-gateway https://envoyproxy.github.io/envoy-gateway\n    helm repo update\n    \n    helm install envoy-gateway envoy-gateway/envoy-gateway \\\n        --namespace envoy-gateway-system \\\n        --create-namespace \\\n        --set gateway.envoyGateway.gateway.controllerName=gateway.envoyproxy.io/gatewayclass-controller\n    \n    # Wait for Envoy Gateway to be ready\n    kubectl wait --for=condition=Ready pods -n envoy-gateway-system --all --timeout=300s\n    \n    echo -e \"\\033[0;32m✅ Envoy Gateway installed successfully\\033[0m\"\n}\n\n# Function to install monitoring stack\ninstall_monitoring() {\n    echo -e \"\\033[1;33m📊 Installing monitoring stack...\\033[0m\"\n    \n    # Install Prometheus Operator\n    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n    helm repo update\n    \n    helm install prometheus prometheus-community/kube-prometheus-stack \\\n        --namespace monitoring \\\n        --create-namespace \\\n        --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \\\n        --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false\n    \n    # Wait for monitoring to be ready\n    kubectl wait --for=condition=Ready pods -n monitoring --all --timeout=300s\n    \n    echo -e \"\\033[0;32m✅ Monitoring stack installed successfully\\033[0m\"\n}\n\n# Function to bootstrap Flux\nbootstrap_flux() {\n    echo -e \"\\033[1;33m🔄 Bootstrapping Flux...\\033[0m\"\n    \n    # Bootstrap Flux\n    flux bootstrap github \\\n        --owner=$GITHUB_OWNER \\\n        --repository=$FLUX_REPO \\\n        --branch=main \\\n        --path=./clusters/$CLUSTER_NAME \\\n        --personal \\\n        --private=false\n    \n    echo -e \"\\033[0;32m✅ Flux bootstrapped successfully\\033[0m\"\n}\n\n# Function to apply application manifests\napply_app_manifests() {\n    echo -e \"\\033[1;33m📋 Applying application manifests...\\033[0m\"\n    \n    # Apply Flux manifests for the application\n    kubectl apply -f flux-app-manifests.yaml\n    \n    echo -e \"\\033[0;32m✅ Application manifests applied successfully\\033[0m\"\n}\n\n# Function to verify installation\nverify_installation() {\n    echo -e \"\\033[1;33m🔍 Verifying installation...\\033[0m\"\n    \n    # Check Flux status\n    echo \"Checking Flux status...\"\n    flux check\n    \n    # Check cluster status\n    echo \"Checking cluster status...\"\n    kubectl get nodes\n    kubectl get pods --all-namespaces\n    \n    # Check Envoy Gateway\n    echo \"Checking Envoy Gateway...\"\n    kubectl get pods -n envoy-gateway-system\n    \n    # Check monitoring\n    echo \"Checking monitoring stack...\"\n    kubectl get pods -n monitoring\n    \n    echo -e \"\\033[0;32m✅ Installation verification completed\\033[0m\"\n}\n\n# Function to display access information\ndisplay_access_info() {\n    echo -e \"\\033[0;34m🎉 Setup completed successfully!\\033[0m\"\n    echo \"\"\n    echo -e \"\\033[1;33m📋 Access Information:\\033[0m\"\n    echo \"Cluster Name: $CLUSTER_NAME\"\n    echo \"Flux Repository: https://github.com/$GITHUB_OWNER/$FLUX_REPO\"\n    echo \"App Repository: https://github.com/$GITHUB_OWNER/$APP_REPO\"\n    echo \"\"\n    echo -e \"\\033[1;33m🔗 Useful Commands:\\033[0m\"\n    echo \"kubectl cluster-info --context kind-$CLUSTER_NAME\"\n    echo \"flux get sources git\"\n    echo \"flux get helmreleases\"\n    echo \"kubectl port-forward svc/$APP_REPO 8080:80\"\n    echo \"\"\n    echo -e \"\\033[1;33m📊 Monitoring URLs:\\033[0m\"\n    echo \"Prometheus: kubectl port-forward svc/prometheus-operated 9090:9090 -n monitoring\"\n    echo \"Grafana: kubectl port-forward svc/prometheus-grafana 3000:80 -n monitoring\"\n    echo \"\"\n    echo -e \"\\033[0;32m🚀 Your GitOps pipeline is ready!\\033[0m\"\n}\n\n# Main execution\nmain() {\n    install_tools\n    create_cluster\n    install_envoy_gateway\n    install_monitoring\n    bootstrap_flux\n    apply_app_manifests\n    verify_installation\n    display_access_info\n}\n\n# Run main function\nmain \"$@\" ","content_base64":null,"content_base64sha256":"aI5/z6DLIeI+vSxbKir3NmPxe68jtmskJV038QoyKuE=","content_base64sha512":"PHZJ1aLyKzbX4NqFezcerx2n5vu7L3K/ELx6ihK2MjJ7ZlmNI3xt7A/Qc0XsZMqfNXxznzCVlUzwyoXvBUFhMw==","content_md5":"7cfcef7bd996575a1ebe0ba75b3dbe1e","content_sha1":"f81e3eded130fa22f773f885673801b8e7ff28c9","content_sha256":"688e7fcfa0cb21e23ebd2c5b2a2af73663f17baf23b66b24255d37f10a322ae1","content_sha512":"3c7649d5a2f22b36d7e0da857b371eaf1da7e6fbbb2f72bf10bc7a8a12b632327b66598d237c6dec0fd07345ec64ca9f357c739f3095954cf0ca85ef05416133","directory_permission":"0777","file_permission":"0755","filename":"./install-scripts.sh","id":"f81e3eded130fa22f773f885673801b8e7ff28c9","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"kind_config","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"kind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nname: local-cluster\n\n# Configure nodes\nnodes:\n- role: control-plane\n  image: kindest/node:v1.28.0\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\n  - containerPort: 30000\n    hostPort: 30000\n    protocol: TCP\n- role: worker\n  image: kindest/node:v1.28.0\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\n  - containerPort: 30000\n    hostPort: 30000\n    protocol: TCP\n- role: worker\n  image: kindest/node:v1.28.0\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\n  - containerPort: 30000\n    hostPort: 30000\n    protocol: TCP\n\n# Networking configuration\nnetworking:\n  apiServerAddress: \"0.0.0.0\"\n  apiServerPort: 6443\n  podSubnet: \"10.244.0.0/16\"\n  serviceSubnet: \"10.96.0.0/12\"\n  disableDefaultCNI: false\n\n# Feature gates for modern Kubernetes features\nfeatureGates:\n  IPv6DualStack: true\n  ServiceAccountIssuerDiscovery: true\n\n# Runtime configuration\nruntimeConfig:\n  \"api/alpha\": \"true\"\n  \"api/beta\": \"true\" ","content_base64":null,"content_base64sha256":"qs+iGeSirpfqvKHKJrvphKXTlX8lS0vYbZELwJsZCic=","content_base64sha512":"U2VDMNOWFOC9beLJZzVX6NJBvHCocUD75f+m/25S6wQR5PtL3YDWfcOcMbcrNRv0Gn0Amasxl6EhnivAoOtKaw==","content_md5":"430b7f47de5a62dda6951a3a27ffca8f","content_sha1":"643a45ee313891198ece30afbc7f7792de0ee722","content_sha256":"aacfa219e4a2ae97eabca1ca26bbe984a5d3957f254b4bd86d910bc09b190a27","content_sha512":"53654330d39614e0bd6de2c9673557e8d241bc70a87140fbe5ffa6ff6e52eb0411e4fb4bdd80d67dc39c31b72b351bf41a7d0099ab3197a1219e2bc0a0eb4a6b","directory_permission":"0777","file_permission":"0777","filename":"./kind-config.yaml","id":"643a45ee313891198ece30afbc7f7792de0ee722","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"mode":"managed","type":"local_file","name":"main_go","provider":"provider[\"registry.opentofu.org/hashicorp/local\"]","instances":[{"schema_version":0,"attributes":{"content":"package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/sirupsen/logrus\"\n)\n\nvar (\n\tlog = logrus.New()\n\tversion = \"dev\"\n\tbuildTime = \"unknown\"\n)\n\nfunc main() {\n\t// Configure logging\n\tlog.SetFormatter(\u0026logrus.JSONFormatter{})\n\tlog.SetOutput(os.Stdout)\n\t\n\t// Set log level based on environment\n\tif os.Getenv(\"LOG_LEVEL\") != \"\" {\n\t\tlevel, err := logrus.ParseLevel(os.Getenv(\"LOG_LEVEL\"))\n\t\tif err == nil {\n\t\t\tlog.SetLevel(level)\n\t\t}\n\t}\n\n\tlog.WithFields(logrus.Fields{\n\t\t\"version\":   version,\n\t\t\"buildTime\": buildTime,\n\t}).Info(\"Starting application\")\n\n\t// Create Gin router\n\trouter := gin.New()\n\trouter.Use(gin.Recovery())\n\trouter.Use(gin.Logger())\n\n\t// Health check endpoint\n\trouter.GET(\"/health\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"status\":    \"healthy\",\n\t\t\t\"timestamp\": time.Now().UTC(),\n\t\t\t\"version\":   version,\n\t\t})\n\t})\n\n\t// Root endpoint\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\":   \"Hello from kbot!\",\n\t\t\t\"version\":   version,\n\t\t\t\"timestamp\": time.Now().UTC(),\n\t\t})\n\t})\n\n\t// Version endpoint\n\trouter.GET(\"/version\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"version\":   version,\n\t\t\t\"buildTime\": buildTime,\n\t\t})\n\t})\n\n\t// Metrics endpoint (placeholder for Prometheus metrics)\n\trouter.GET(\"/metrics\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"uptime\": time.Since(time.Now()).String(),\n\t\t})\n\t})\n\n\t// Get port from environment or use default\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\t// Create server\n\tsrv := \u0026http.Server{\n\t\tAddr:    \":\" + port,\n\t\tHandler: router,\n\t}\n\n\t// Start server in a goroutine\n\tgo func() {\n\t\tlog.WithField(\"port\", port).Info(\"Starting HTTP server\")\n\t\tif err := srv.ListenAndServe(); err != nil \u0026\u0026 err != http.ErrServerClosed {\n\t\t\tlog.WithError(err).Fatal(\"Failed to start server\")\n\t\t}\n\t}()\n\n\t// Wait for interrupt signal to gracefully shutdown the server\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n\t\u003c-quit\n\n\tlog.Info(\"Shutting down server...\")\n\n\t// Create a deadline for server shutdown\n\tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n\tdefer cancel()\n\n\t// Attempt graceful shutdown\n\tif err := srv.Shutdown(ctx); err != nil {\n\t\tlog.WithError(err).Fatal(\"Server forced to shutdown\")\n\t}\n\n\tlog.Info(\"Server exited\")\n} ","content_base64":null,"content_base64sha256":"fgoFHYNJSn2yqCJi98HcJOGKYcvcxmjKiqglCauWB5E=","content_base64sha512":"8aZQ566lnuuYUm6od0xPpKvgQQDU7NbKRi3HNjos8NwA1JNa8im0wgBl2GTpmiZTP5LPs7ls5tgcpFf1ab8YCQ==","content_md5":"de003fb70170c5d282299d5cda206275","content_sha1":"f0f4f020dcbfd62e9fc51448bdad4d307b3b7f0d","content_sha256":"7e0a051d83494a7db2a82262f7c1dc24e18a61cbdcc668ca8aa82509ab960791","content_sha512":"f1a650e7aea59eeb98526ea8774c4fa4abe04100d4ecd6ca462dc7363a2cf0dc00d4935af229b4c20065d864e99a26533f92cfb3b96ce6d81ca457f569bf1809","directory_permission":"0777","file_permission":"0777","filename":"./main.go","id":"f0f4f020dcbfd62e9fc51448bdad4d307b3b7f0d","sensitive_content":null,"source":null},"sensitive_attributes":[[{"type":"get_attr","value":"sensitive_content"}]]}]},{"module":"module.app_repository","mode":"managed","type":"github_repository","name":"this","provider":"module.app_repository.provider[\"registry.opentofu.org/integrations/github\"]","instances":[{"schema_version":1,"attributes":{"allow_auto_merge":false,"allow_merge_commit":true,"allow_rebase_merge":true,"allow_squash_merge":true,"allow_update_branch":false,"archive_on_destroy":null,"archived":false,"auto_init":true,"default_branch":"main","delete_branch_on_merge":false,"description":"","etag":"W/\"b71d584da71c5edaf772997aedb7e84b6261df56294aeadf4b216c019d1b9bfb\"","full_name":"TIrtxika/kbot","git_clone_url":"git://github.com/TIrtxika/kbot.git","gitignore_template":null,"has_discussions":false,"has_downloads":false,"has_issues":false,"has_projects":false,"has_wiki":false,"homepage_url":"","html_url":"https://github.com/TIrtxika/kbot","http_clone_url":"https://github.com/TIrtxika/kbot.git","id":"kbot","ignore_vulnerability_alerts_during_read":null,"is_template":false,"license_template":null,"merge_commit_message":"PR_TITLE","merge_commit_title":"MERGE_MESSAGE","name":"kbot","node_id":"R_kgDOPEMpcQ","pages":[],"primary_language":"","private":true,"repo_id":1011034481,"security_and_analysis":[],"squash_merge_commit_message":"COMMIT_MESSAGES","squash_merge_commit_title":"COMMIT_OR_PR_TITLE","ssh_clone_url":"git@github.com:TIrtxika/kbot.git","svn_url":"https://github.com/TIrtxika/kbot","template":[],"topics":[],"visibility":"private","vulnerability_alerts":false,"web_commit_signoff_required":false},"sensitive_attributes":[],"private":"eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="}]},{"module":"module.app_repository","mode":"managed","type":"github_repository_deploy_key","name":"this","provider":"module.app_repository.provider[\"registry.opentofu.org/integrations/github\"]","instances":[{"schema_version":0,"attributes":{"etag":"W/\"466b01f061ee480d8aba6d827d4eaca9639112a983a3301eb6780da6a3bf89de\"","id":"kbot:125815564","key":"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDoxLFyEzWiQB+na2uybVqDmhO6MjLHnb5ioNg4CFxVGuvDrItPgSYkKUs1MxbP4PReEkCafIImvjbXAG+qVniw=","read_only":false,"repository":"kbot","title":"flux-kbot-20250630-075633"},"sensitive_attributes":[[{"type":"get_attr","value":"key"}]],"private":"bnVsbA==","dependencies":["module.app_repository.github_repository.this","module.app_tls_keys.tls_private_key.this"]}]},{"module":"module.app_tls_keys","mode":"managed","type":"tls_private_key","name":"this","provider":"provider[\"registry.opentofu.org/hashicorp/tls\"]","instances":[{"schema_version":1,"attributes":{"algorithm":"ECDSA","ecdsa_curve":"P256","id":"6617d12063a39a09e51057edf20f5892a6d87bb0","private_key_openssh":"-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAaAAAABNl\nY2RzYS1zaGEyLW5pc3RwMjU2AAAACG5pc3RwMjU2AAAAQQQ6MSxchM1okAfp2trs\nm1ag5oTujIyx52+YqDYOAhcVRrrw6yLT4EmJClLNTMWz+D0XhJAmnyCJr421wBvq\nlZ4sAAAAoFyKVzlcilc5AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAy\nNTYAAABBBDoxLFyEzWiQB+na2uybVqDmhO6MjLHnb5ioNg4CFxVGuvDrItPgSYkK\nUs1MxbP4PReEkCafIImvjbXAG+qVniwAAAAhAIX6W/FyaBrCaECY5lnbsQCC07WG\nflaf8+MLWJDW4gONAAAAAAECAwQFBgc=\n-----END OPENSSH PRIVATE KEY-----\n","private_key_pem":"-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIIX6W/FyaBrCaECY5lnbsQCC07WGflaf8+MLWJDW4gONoAoGCCqGSM49\nAwEHoUQDQgAEOjEsXITNaJAH6dra7JtWoOaE7oyMsedvmKg2DgIXFUa68Osi0+BJ\niQpSzUzFs/g9F4SQJp8gia+NtcAb6pWeLA==\n-----END EC PRIVATE KEY-----\n","private_key_pem_pkcs8":"-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQghfpb8XJoGsJoQJjm\nWduxAILTtYZ+Vp/z4wtYkNbiA42hRANCAAQ6MSxchM1okAfp2trsm1ag5oTujIyx\n52+YqDYOAhcVRrrw6yLT4EmJClLNTMWz+D0XhJAmnyCJr421wBvqlZ4s\n-----END PRIVATE KEY-----\n","public_key_fingerprint_md5":"15:61:4a:64:ac:b6:c4:ba:d9:b1:04:17:18:1d:3d:d5","public_key_fingerprint_sha256":"SHA256:5TgRmKpmlucTIXfevdM3FPC0aZYVgyjRUW8B3itL0pA","public_key_openssh":"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDoxLFyEzWiQB+na2uybVqDmhO6MjLHnb5ioNg4CFxVGuvDrItPgSYkKUs1MxbP4PReEkCafIImvjbXAG+qVniw=\n","public_key_pem":"-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEOjEsXITNaJAH6dra7JtWoOaE7oyM\nsedvmKg2DgIXFUa68Osi0+BJiQpSzUzFs/g9F4SQJp8gia+NtcAb6pWeLA==\n-----END PUBLIC KEY-----\n","rsa_bits":2048},"sensitive_attributes":[[{"type":"get_attr","value":"private_key_pem"}],[{"type":"get_attr","value":"private_key_openssh"}],[{"type":"get_attr","value":"private_key_pem_pkcs8"}]]}]},{"module":"module.flux_repository","mode":"managed","type":"github_repository","name":"this","provider":"module.flux_repository.provider[\"registry.opentofu.org/integrations/github\"]","instances":[{"schema_version":1,"attributes":{"allow_auto_merge":false,"allow_merge_commit":true,"allow_rebase_merge":true,"allow_squash_merge":true,"allow_update_branch":false,"archive_on_destroy":null,"archived":false,"auto_init":true,"default_branch":"main","delete_branch_on_merge":false,"description":"","etag":"W/\"741cf141c97c424ea6d9f09d35903e2e08e37914c0ae7e1cce3329c1966591a1\"","full_name":"TIrtxika/local-cluster-flux-bootstrap","git_clone_url":"git://github.com/TIrtxika/local-cluster-flux-bootstrap.git","gitignore_template":null,"has_discussions":false,"has_downloads":false,"has_issues":false,"has_projects":false,"has_wiki":false,"homepage_url":"","html_url":"https://github.com/TIrtxika/local-cluster-flux-bootstrap","http_clone_url":"https://github.com/TIrtxika/local-cluster-flux-bootstrap.git","id":"local-cluster-flux-bootstrap","ignore_vulnerability_alerts_during_read":null,"is_template":false,"license_template":null,"merge_commit_message":"PR_TITLE","merge_commit_title":"MERGE_MESSAGE","name":"local-cluster-flux-bootstrap","node_id":"R_kgDOPEMpbQ","pages":[],"primary_language":"","private":true,"repo_id":1011034477,"security_and_analysis":[],"squash_merge_commit_message":"COMMIT_MESSAGES","squash_merge_commit_title":"COMMIT_OR_PR_TITLE","ssh_clone_url":"git@github.com:TIrtxika/local-cluster-flux-bootstrap.git","svn_url":"https://github.com/TIrtxika/local-cluster-flux-bootstrap","template":[],"topics":[],"visibility":"private","vulnerability_alerts":false,"web_commit_signoff_required":false},"sensitive_attributes":[],"private":"eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="}]},{"module":"module.flux_repository","mode":"managed","type":"github_repository_deploy_key","name":"this","provider":"module.flux_repository.provider[\"registry.opentofu.org/integrations/github\"]","instances":[{"schema_version":0,"attributes":{"etag":"W/\"0d7b628aa5cab229f21fe2e3d98ac218640f78b0ffc1643b281d18d773f929f6\"","id":"local-cluster-flux-bootstrap:125815565","key":"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKbwDy2Qokl5YoukFAp846VOx1tds8U/cORxNDd7ys2bcrbkgyLSknu2dThGYVByDzFOH8+9JzJnC8CJ6WiDsfU=","read_only":false,"repository":"local-cluster-flux-bootstrap","title":"flux-local-cluster-20250630-075633"},"sensitive_attributes":[[{"type":"get_attr","value":"key"}]],"private":"bnVsbA==","dependencies":["module.flux_repository.github_repository.this","module.tls_keys.tls_private_key.this"]}]},{"module":"module.tls_keys","mode":"managed","type":"tls_private_key","name":"this","provider":"provider[\"registry.opentofu.org/hashicorp/tls\"]","instances":[{"schema_version":1,"attributes":{"algorithm":"ECDSA","ecdsa_curve":"P256","id":"0c06a8d7ec5dc105db5af542d5af42f0085c5eef","private_key_openssh":"-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAaAAAABNl\nY2RzYS1zaGEyLW5pc3RwMjU2AAAACG5pc3RwMjU2AAAAQQSm8A8tkKJJeWKLpBQK\nfOOlTsdbXbPFP3DkcTQ3e8rNm3K25IMi0pJ7tnU4RmFQcg8xTh/PvScyZwvAielo\ng7H1AAAAoJKYIgqSmCIKAAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAy\nNTYAAABBBKbwDy2Qokl5YoukFAp846VOx1tds8U/cORxNDd7ys2bcrbkgyLSknu2\ndThGYVByDzFOH8+9JzJnC8CJ6WiDsfUAAAAhAMvx0PT3kTSywJOYMbxK7q4NsZMI\nvhk6gyYpG1Pw0UCTAAAAAAECAwQFBgc=\n-----END OPENSSH PRIVATE KEY-----\n","private_key_pem":"-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIMvx0PT3kTSywJOYMbxK7q4NsZMIvhk6gyYpG1Pw0UCToAoGCCqGSM49\nAwEHoUQDQgAEpvAPLZCiSXlii6QUCnzjpU7HW12zxT9w5HE0N3vKzZtytuSDItKS\ne7Z1OEZhUHIPMU4fz70nMmcLwInpaIOx9Q==\n-----END EC PRIVATE KEY-----\n","private_key_pem_pkcs8":"-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgy/HQ9PeRNLLAk5gx\nvErurg2xkwi+GTqDJikbU/DRQJOhRANCAASm8A8tkKJJeWKLpBQKfOOlTsdbXbPF\nP3DkcTQ3e8rNm3K25IMi0pJ7tnU4RmFQcg8xTh/PvScyZwvAielog7H1\n-----END PRIVATE KEY-----\n","public_key_fingerprint_md5":"2c:bf:e6:84:9c:e9:bc:2a:8e:34:8b:eb:26:85:fb:27","public_key_fingerprint_sha256":"SHA256:G5WEbNkCcJ+ziq5lsvJAiBLaqs6oSXjsXtVnkOclotw","public_key_openssh":"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKbwDy2Qokl5YoukFAp846VOx1tds8U/cORxNDd7ys2bcrbkgyLSknu2dThGYVByDzFOH8+9JzJnC8CJ6WiDsfU=\n","public_key_pem":"-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEpvAPLZCiSXlii6QUCnzjpU7HW12z\nxT9w5HE0N3vKzZtytuSDItKSe7Z1OEZhUHIPMU4fz70nMmcLwInpaIOx9Q==\n-----END PUBLIC KEY-----\n","rsa_bits":2048},"sensitive_attributes":[[{"type":"get_attr","value":"private_key_pem"}],[{"type":"get_attr","value":"private_key_openssh"}],[{"type":"get_attr","value":"private_key_pem_pkcs8"}]]}]}],"check_results":null}
